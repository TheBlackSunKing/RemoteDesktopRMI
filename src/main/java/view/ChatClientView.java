/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import chat.ChatInterface;
import chat.Message;
import client.TCPClient;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultCaret;
import remote.desktopview.DesktopClient;
import server.RMIServer;
import server.TCPServer;

/**
 * La vista del Chat
 * @author Jose
 */
public class ChatClientView extends javax.swing.JPanel implements MouseListener, KeyListener {
    JFrame frame;
    String username;
    RMIServer server;
    TCPServer tcpserver;
    TCPClient tcpClient;
    
    private String ipInput;
    private int port;
    private String password;
        
    
    
    ChatInterface chat;
    List<Message> msgs = new ArrayList<>();
    List<String> users = new ArrayList<>();
    Message last;
    /**
     * Crea una vista del chat
     * @param frame
     * @param chat
     * @param port
     * @param username
     */
    public ChatClientView(JFrame frame, ChatInterface chat, String username, String ipInput, int port, String password)  throws RemoteException {
        
        this.ipInput = ipInput;
        this.port = port;
        this.password = password;

        try {
            initComponents();
            this.chat = chat;
            this.username = username;
            this.frame = frame;
            this.tcpClient = new TCPClient(this);
            tcpConnect();
            DefaultCaret caret = (DefaultCaret)chatListTextArea.getCaret();
            caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
            chat.login(username);
            
            execute();
            
            
            frame.setSize(800, 600);
            DesktopClient desktop = new DesktopClient(ipInput,port);
        } catch (IOException ex) {
            this.server = null;
            this.tcpClient = null;
            enterWelcomeView("Mala clave");
            Logger.getLogger(ChatClientView.class.getName()).log(Level.SEVERE, null, ex);

        }
    }
     /**
     * Crea una vista del chat para el servidor.
     * @param frame
     * @param chat
     * @param username
     * @param server
     */
     public ChatClientView(JFrame frame, ChatInterface chat, String username, RMIServer server)  throws RemoteException {
        initComponents();
        this.server = server;
        this.chat = chat;
        this.username = username;
        DefaultCaret caret = (DefaultCaret)chatListTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        chat.login(username);               
        execute();
        this.frame = frame;
        //chatListTextArea.setMaximumSize((3        
        frame.setSize(800, 600);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        userListTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        chatInputText = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        panel = new javax.swing.JScrollPane(chatListTextArea,javax.swing.JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        chatListTextArea = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setToolTipText("");
        jPanel1.setAutoscrolls(true);

        userListTextArea.setColumns(20);
        userListTextArea.setRows(5);
        jScrollPane2.setViewportView(userListTextArea);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 204));
        jLabel2.setText("Usuarios");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setToolTipText("");
        jPanel2.setAutoscrolls(true);

        nameLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(0, 51, 204));
        nameLabel.setText("Usuario");

        logoutButton.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        logoutButton.setText("Salir");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        chatInputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatInputTextActionPerformed(evt);
            }
        });

        sendButton.setText("Enviar");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        chatListTextArea.setContentType("text/html"); // NOI18N
        chatListTextArea.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        chatListTextArea.setAutoscrolls(false);
        chatListTextArea.setFocusCycleRoot(false);
        chatListTextArea.setFocusable(false);
        chatListTextArea.setMaximumSize(new java.awt.Dimension(600, 800));
        panel.setViewportView(chatListTextArea);

        jButton1.setText("Archivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(panel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(chatInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(20, 20, 20))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chatInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chatInputTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatInputTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chatInputTextActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        sendNewMessage();
        refresh();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        try {
            chat.logout(username);  //use the reference "chat" to call remote methods
            chat = null;
            enterWelcomeView("Salido");
            //catch the exceptions may occur, Rubbish URL, RemoteException
        } catch (RemoteException ex) {
            Logger.getLogger(ChatClientView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater
        (() -> {
            FileTransferView fileframe = new FileTransferView();
            
            //fileview = new FileView();
            //JPanel serverView = new ServerView(frame);
            
            fileframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            //fileframe.getContentPane().add(fileview);
            fileframe.setSize(600,400);
            fileframe.setResizable(false);
            fileframe.setLocationRelativeTo(null);
            //frame.getContentPane().add(serverView);
            //frame.getContentPane().add(serverView, "serverView");
            fileframe.pack();
            fileframe.setVisible(true);
        });
    }//GEN-LAST:event_jButton1ActionPerformed
   
    private void sendNewMessage() {
        String inputMessage = chatInputText.getText();
        if (inputMessage.length() < 1)
            return;
        chatInputText.setText("");
        Message message = new Message();
        message.setUsername(username);
        message.setMsg(inputMessage);
        message.setType("client");
        message.setDate(new Date());
        try {
            chat.sendMessage(message);
        } catch (RemoteException ex) {
            enterWelcomeView(ex.toString());
            Logger.getLogger(ChatClientView.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField chatInputText;
    private javax.swing.JTextPane chatListTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JScrollPane panel;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea userListTextArea;
    // End of variables declaration//GEN-END:variables
    
    //
    /**
     * Cierra toda las conexiones y devuelbe la pantalla a la vista de welcome.
     * @param Message: Mensaje de error que se desea monstrar en la pantall de welcome
     */
    public void enterWelcomeView(String Message) {                                                
        try {
            // TODO add your handling code here:
            this.chat.logout(username);
        } catch (RemoteException ex) {
            Logger.getLogger(ChatClientView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.chat = null;
        this.server = null;
        
        this.setVisible(false);
        WelcomeView temp = new WelcomeView(frame);
        temp.setErrorMessage(Message);
        frame.getContentPane().removeAll();
        frame.getContentPane().add(temp);
        
        frame.setSize(350,400);
        frame.pack();
        frame.setVisible(true);
        //frame.getContentPane().add(welcomeView);
        //f
        
    } 
    private void addListeners() {

         chatInputText.addKeyListener(this);
    }
    
    private void tcpConnect() throws IOException{

         this.tcpClient.startConnectingToTcpServer(ipInput, port+1, password);

    }
    private void execute() {
       
        userListTextArea.setLineWrap(true);     // to remove horizontal scrolling bar 
        //frame.setTitle("Public Chat");  
        //setImages();
        addListeners();      
        this.nameLabel.setText(username);
        this.setVisible(true);
        //setLocationRelativeTo(null);            // to visible the GUI in the middle of the screen
       
        Thread t1 = new Thread(() -> {
            while (true) {
                refresh();                  // this thread is used to refresh the chat window by every second
                try {                       // to display whole chat list
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    enterWelcomeView(ex.toString());
                    Logger.getLogger(ChatClientView.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
            }
        });
        t1.start();
    }
    public void refresh() {
        try {
            displayChatList();
            displayUserList();
        } catch (RemoteException ex) {
            System.out.print("Servidor caido");
            enterWelcomeView("Servidor Caido");
            Logger.getLogger(ChatClientView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void displayUserList() throws RemoteException {
        userListTextArea.setText("");
        users = chat.getAllUsers();
        for (String u : users) {
            if (!u.equals(username)) {             
                userListTextArea.append(" " + u + "\n");             
            }
        }
    }
    /**
     * Este metodo actualiza el chat.
     */
    public void displayChatList() throws RemoteException {
       

        msgs = chat.getAllMessages();
        if (last== null)
            last  = msgs.getLast();
        else if (msgs.getLast().getDate().equals(last.getDate())){
            System.out.println("Mensaje DIferente");
            return;
        }
        else{          
            System.out.println("Actualizando");
            last  = msgs.getLast();
        }
        chatListTextArea.setText("");
        String doc = "<html><body><table>";
        for (Message m : msgs) {
            if (!((m.getUsername().equals(username)) && (m.getType().equals("join")))) {             
                String smileyName = m.getSmiley();               
                Date date = m.getDate();
                DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                String a = dateFormat.format(date);
                SimpleDateFormat parseFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                SimpleDateFormat printFormat = new SimpleDateFormat("HH:mm:ss");
                String str = m.getMsg();
                str += "\n"; // Needed to handle last line correctly
                str = str.replaceAll("(.{55})", "$1<br>");
                try {
                    Date time = parseFormat.parse(a);
                    if (smileyName == null) {
                        doc += "<tr><td>" 
                                + printFormat.format(time) 
                                + "</td><td><font color='rgb(55,178,204)'><b>" 
                                + m.getUsername() 
                                + "</b></font></td><td> " 
                                + str
                                //+ "</td>"
                                //+"<td> " 
                                + "</td></tr>";
                    } else {                  
                        doc += "<tr><td> " 
                                + printFormat.format(time) 
                                + "</td><td><font color='rgb(55,178,204)'><b>" 
                                + m.getUsername()  
                                + "</b></font></td><td><img src= '" 
                                + this.getClass().getResource("/images/"+smileyName) 
                                + "' width=50 height=50 /> </td></tr>";
                    }
                } catch (ParseException ex) {
                    enterWelcomeView(ex.toString());
                    Logger.getLogger(ChatClientView.class.getName()).log(Level.SEVERE, null, ex);
                }                        
            }
        }
        doc += "</table></body></html>";
        chatListTextArea.setText(doc);
        //chatListTextArea.setSize(400,40);
        //this.panel.setSize(400,40);
        //chatListTextArea.setSize(500,chatListTextArea.getPreferredSize().height);
        //chatListTextArea.setCaretPosition(chatListTextArea.getDocument().getLength());
    }
    @Override
    public void mouseClicked(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            sendNewMessage();
            refresh();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
