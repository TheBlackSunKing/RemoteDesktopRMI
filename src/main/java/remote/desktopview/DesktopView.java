/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package remote.desktopview;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.InputEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.*;
import java.io.ByteArrayInputStream;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import remote.desktop.ComputerInfo;
import remote.desktop.DriveInfo;
import remote.desktop.IRemoteDesktop;
/**
 * Vista del escritorio compartido
 * @author Usuario
 */
public class DesktopView extends javax.swing.JPanel {

    private Dimension screen_size;
    
    
    private float dx;
    private float dy;
    private int w,h;
    
    private IRemoteDesktop remote_obj;
    private String quality;
    private JFrame frame;
    private DesktopInfoView infoView;
    
    
    /**
     * 
     * @param  remote_obj:  Recibe el objeto remoto del escritorio compartido del servidor.
     * @param frame: Recibe el frame donde el panel es creado.
     * 
    * 
    * @see         Image
    */
    public DesktopView(IRemoteDesktop remote_obj, JFrame frame) {
        this.screen_size = Toolkit.getDefaultToolkit().getScreenSize();
        initComponents();
        try {         
            //192.168.1.110

            this.remote_obj = remote_obj;
            this.frame = frame;
            quality = "low";
            setupWindow();
            
            addMouseListener();
            //run();
            execute();      
        } catch (Exception ex) {
            Logger.getLogger(DesktopView.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtilities.invokeLater
        (() -> {
            infoView = new DesktopInfoView();         
            infoView.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            infoView.setVisible(true);

            
        });
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
 
    private void execute(){
        
        Thread t1 = new Thread(() -> {
            while (true) {
                              // this thread is used to refresh the chat window by every second
                try {   //Da la pantallas
                    run();    
                    //Thread.sleep(0);
                } catch (InterruptedException ex) {
                    Logger.getLogger(DesktopView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(DesktopView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        t1.start();
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        screen_label = new javax.swing.JLabel();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(screen_label)
                .addGap(0, 1200, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(screen_label)
                .addGap(0, 800, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {
        BufferedImage resizedImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);
        Graphics2D graphics2D = resizedImage.createGraphics();
        graphics2D.drawImage(originalImage, 0, 0, targetWidth, targetHeight, null);
        graphics2D.dispose();
        return resizedImage;
    }
    private void run () throws Exception{
        byte[] dgram;
        String infoMessage = "Informacion de equipo: \n";
        //System.out.println(this.remote_obj.getRamUsageServer());
        double ramUsageRatio = this.remote_obj.getRamUsageServer();
        double ramRatio = ramUsageRatio;
        //System.out.print("RAM USAGE RATIO: ");
        infoMessage += "USO DEL RAM:";
        while (ramUsageRatio > 0){
            //System.out.print("|");
            infoMessage += "|";
            ramUsageRatio -=0.02;
        }
        
       // System.out.println("("+ (int)(ramRatio*100) + "%)");
        infoMessage += "("+ (int)(ramRatio*100) + "%)\n";
        infoMessage += "Ram: " + this.remote_obj.getRamMemories()[0]+" GB\n";
        infoMessage += "Ram Extra:" + this.remote_obj.getRamMemories()[1] + " GB \n";
        infoMessage += "CPUs: "+ this.remote_obj.getCpus() + "\n";
        //System.out.println("\nRam: " + this.remote_obj.getRamMemories()[0]+" GB");
        //System.out.println(this.remote_obj.getRamMemories()[1]);
        // System.out.println("CPUs: "+ this.remote_obj.getCpus());
        // System.out.println(this.remote_obj.getCpus());
        ComputerInfo computerInfo = this.remote_obj.getComputerInformation();
        for(DriveInfo drive :  computerInfo.getDrives()) {
                long total_space = drive.getTotalSpace();
                long usage_space = total_space - drive.getFreeSpace();
                String name = drive.getName();
                infoMessage +="_______________________________\n";
                infoMessage += name + "\n";
                //System.out.println(name);
                infoMessage +="Espacio Total: " + total_space + " GBs\n";
                //System.out.println("Espacio Total: " + total_space + " GBs");
                infoMessage +="Espacio Usado: " + usage_space + " GBs\n";
                //System.out.println("Espacio Usado: " + usage_space + " GBs");
                
        }

        dgram = this.remote_obj.takeScreenshotServer(quality);        
        ByteArrayInputStream bis = new ByteArrayInputStream(dgram);
        //System.out.print(bis);
        
        BufferedImage screenshot = ImageIO.read(bis);
        //screenshot = resizeImage(screenshot, frame.getWidth(), frame.getHeight());
        

        //this.screen_label.setText(quality);
        this.screen_label.setIcon(new ImageIcon(screenshot));
        this.infoView.setInfoArea(infoMessage);
    }
    public void Close(){
        setVisible(false); //you can't see me!
        frame.dispose(); //Destroy the JFrame object
        frame.setVisible(false);
        
        this.remote_obj = null;
    }
     // TODO: remote mouse of server
    
    private void addMouseListener(){
        this.screen_label.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                try {
                    screenLabelMousePressed(e);
                }
                catch(RemoteException remoteException) {
                    dispose();
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                try {
                    screenLabelMouseReleased(e);
                }
                catch(RemoteException remoteException) {
                    dispose();
                }
            }
        });
        this.addMouseWheelListener((e) -> {
            try {
                screenLabelMouseWheelMoved(e);
            }
            catch(RemoteException remoteException) {
                dispose();
            }
        });
        this.screen_label.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                try {
                    screenLabelMouseMoved(e);
                }
                catch(RemoteException remoteException) {
                    dispose();
                }
            }

            @Override
            public void mouseDragged(MouseEvent e) {
                try {
                    screenLabelMouseDragged(e);
                }
                catch(RemoteException remoteException) {
                    dispose();
                }
            }
        });
    }
    
    private void screenLabelMousePressed(MouseEvent e) throws RemoteException {
        this.remote_obj.mousePressedServer(InputEvent.getMaskForButton(e.getButton()));
    }

    private void screenLabelMouseReleased(MouseEvent e) throws RemoteException {
        this.remote_obj.mouseReleasedServer(InputEvent.getMaskForButton(e.getButton()));
    }

    private void screenLabelMouseMoved(MouseEvent e) throws RemoteException {
        float x = e.getX() * dx;
        float y = e.getY() * dy;
        this.remote_obj.mouseMovedServer((int) x, (int) y);
    }

    private void screenLabelMouseDragged(MouseEvent e) throws RemoteException {
        float x = e.getX() * dx;
        float y = e.getY() * dy;
        this.remote_obj.mouseMovedServer((int) x, (int) y);
    }

    private void screenLabelMouseWheelMoved(MouseWheelEvent e) throws RemoteException {
        this.remote_obj.mouseWheelServer(e.getWheelRotation());
    }
    public void setFrameSize(){
        this.frame.setSize(w,h);
    }
    private void setupWindow() throws Exception {
        ImageIO.setUseCache(false);
        byte[] dgram = this.remote_obj.takeScreenshotServer(quality);
        ByteArrayInputStream bis = new ByteArrayInputStream(dgram);
        BufferedImage screenshot = ImageIO.read(bis);

        //this.screen_size.width -= (this.taskbar_insets.left + this.taskbar_insets.right);
        //this.screen_size.height -= (this.taskbar_insets.top + this.taskbar_insets.bottom + this.frame_insets.top + this.menu_bar.getPreferredSize().height);

        // TODO: your screen lager than partner's screen
        if(this.screen_size.width > screenshot.getWidth() && this.screen_size.height > screenshot.getHeight()) {
            int h_gap = (this.screen_size.width - screenshot.getWidth()) / 2;
            int v_gap = (this.screen_size.height - screenshot.getHeight()) / 2;

            this.dx = 1;
            this.dy = 1;
            this.screen_label.setBounds(h_gap, v_gap, screenshot.getWidth(), screenshot.getHeight());
            this.frame.setBounds(h_gap, v_gap, screenshot.getWidth()+300, screenshot.getHeight());
        }
        // TODO: your screen smaller than partner's screen
        else {
            float ratio = (float) screenshot.getWidth() / screenshot.getHeight();
            int tmp_width = this.screen_size.width;
            this.screen_size.width = (int) (ratio * this.screen_size.height);

            int h_gap = (tmp_width - this.screen_size.width) / 2;

            this.dx = (float) screenshot.getWidth() / this.screen_size.width;
            this.dy = (float) screenshot.getHeight() / this.screen_size.height;
            this.screen_label.setBounds(h_gap, 0, this.screen_size.width, this.screen_size.height);
            this.frame.setBounds(h_gap, 0, this.screen_size.width+150, this.screen_size.height);
        }
        //this.setSize(100, 100);

        //this.screen_label.setIcon(new ImageIcon(screenshot));
        
        //this.setSize(this.screen_label.getSize());
        this.frame.setSize(screenshot.getWidth(),screenshot.getHeight());
        w= screenshot.getWidth()+50;
        h= screenshot.getHeight()+50;
        
    }
    /*
    // TODO: get hardware info of server
    private void menuMonitorMousePressed(MouseEvent e) {
        if(e.getButton() == MouseEvent.BUTTON1) {
            this.hardware_dialog.setVisible(true);
        }
    }

    private void menuMonitorMouseEntered(MouseEvent e) {
        //this.menu_monitor.setFont(new Font("segoe ui", Font.BOLD, 16));
        this.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }

    private void menuMonitorMouseExited(MouseEvent e) {
        //this.menu_monitor.setFont(new Font("segoe ui", Font.PLAIN, 14));
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel screen_label;
    // End of variables declaration//GEN-END:variables

    private void dispose() {

        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
